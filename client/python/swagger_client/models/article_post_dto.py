# coding: utf-8

"""
    CryptoQuery API

    API for Senior Project  # noqa: E501

    OpenAPI spec version: v1
    Contact: fsolano@nevada.unr.edu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ArticlePostDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'updated_at': 'str',
        'created_at': 'str',
        'date_of_publification': 'str',
        'author': 'str',
        'url': 'str',
        'title': 'str',
        'topic': 'str',
        'complexity': 'int',
        'quality': 'int'
    }

    attribute_map = {
        'updated_at': 'updatedAt',
        'created_at': 'createdAt',
        'date_of_publification': 'dateOfPublification',
        'author': 'author',
        'url': 'url',
        'title': 'title',
        'topic': 'topic',
        'complexity': 'complexity',
        'quality': 'quality'
    }

    def __init__(self, updated_at=None, created_at=None, date_of_publification=None, author=None, url=None, title=None, topic=None, complexity=None, quality=None):  # noqa: E501
        """ArticlePostDto - a model defined in Swagger"""  # noqa: E501

        self._updated_at = None
        self._created_at = None
        self._date_of_publification = None
        self._author = None
        self._url = None
        self._title = None
        self._topic = None
        self._complexity = None
        self._quality = None
        self.discriminator = None

        if updated_at is not None:
            self.updated_at = updated_at
        if created_at is not None:
            self.created_at = created_at
        if date_of_publification is not None:
            self.date_of_publification = date_of_publification
        if author is not None:
            self.author = author
        if url is not None:
            self.url = url
        if title is not None:
            self.title = title
        if topic is not None:
            self.topic = topic
        if complexity is not None:
            self.complexity = complexity
        if quality is not None:
            self.quality = quality

    @property
    def updated_at(self):
        """Gets the updated_at of this ArticlePostDto.  # noqa: E501


        :return: The updated_at of this ArticlePostDto.  # noqa: E501
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this ArticlePostDto.


        :param updated_at: The updated_at of this ArticlePostDto.  # noqa: E501
        :type: str
        """

        self._updated_at = updated_at

    @property
    def created_at(self):
        """Gets the created_at of this ArticlePostDto.  # noqa: E501


        :return: The created_at of this ArticlePostDto.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this ArticlePostDto.


        :param created_at: The created_at of this ArticlePostDto.  # noqa: E501
        :type: str
        """

        self._created_at = created_at

    @property
    def date_of_publification(self):
        """Gets the date_of_publification of this ArticlePostDto.  # noqa: E501


        :return: The date_of_publification of this ArticlePostDto.  # noqa: E501
        :rtype: str
        """
        return self._date_of_publification

    @date_of_publification.setter
    def date_of_publification(self, date_of_publification):
        """Sets the date_of_publification of this ArticlePostDto.


        :param date_of_publification: The date_of_publification of this ArticlePostDto.  # noqa: E501
        :type: str
        """

        self._date_of_publification = date_of_publification

    @property
    def author(self):
        """Gets the author of this ArticlePostDto.  # noqa: E501


        :return: The author of this ArticlePostDto.  # noqa: E501
        :rtype: str
        """
        return self._author

    @author.setter
    def author(self, author):
        """Sets the author of this ArticlePostDto.


        :param author: The author of this ArticlePostDto.  # noqa: E501
        :type: str
        """

        self._author = author

    @property
    def url(self):
        """Gets the url of this ArticlePostDto.  # noqa: E501


        :return: The url of this ArticlePostDto.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this ArticlePostDto.


        :param url: The url of this ArticlePostDto.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def title(self):
        """Gets the title of this ArticlePostDto.  # noqa: E501


        :return: The title of this ArticlePostDto.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this ArticlePostDto.


        :param title: The title of this ArticlePostDto.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def topic(self):
        """Gets the topic of this ArticlePostDto.  # noqa: E501


        :return: The topic of this ArticlePostDto.  # noqa: E501
        :rtype: str
        """
        return self._topic

    @topic.setter
    def topic(self, topic):
        """Sets the topic of this ArticlePostDto.


        :param topic: The topic of this ArticlePostDto.  # noqa: E501
        :type: str
        """

        self._topic = topic

    @property
    def complexity(self):
        """Gets the complexity of this ArticlePostDto.  # noqa: E501


        :return: The complexity of this ArticlePostDto.  # noqa: E501
        :rtype: int
        """
        return self._complexity

    @complexity.setter
    def complexity(self, complexity):
        """Sets the complexity of this ArticlePostDto.


        :param complexity: The complexity of this ArticlePostDto.  # noqa: E501
        :type: int
        """

        self._complexity = complexity

    @property
    def quality(self):
        """Gets the quality of this ArticlePostDto.  # noqa: E501


        :return: The quality of this ArticlePostDto.  # noqa: E501
        :rtype: int
        """
        return self._quality

    @quality.setter
    def quality(self, quality):
        """Sets the quality of this ArticlePostDto.


        :param quality: The quality of this ArticlePostDto.  # noqa: E501
        :type: int
        """

        self._quality = quality

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ArticlePostDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
