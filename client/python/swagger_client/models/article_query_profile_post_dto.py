# coding: utf-8

"""
    CryptoQuery API

    API for Senior Project  # noqa: E501

    OpenAPI spec version: v1
    Contact: fsolano@nevada.unr.edu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ArticleQueryProfilePostDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'topics': 'list[str]',
        'complexity': 'int',
        'quality': 'int',
        'push_token': 'int',
        'push_enabled': 'bool'
    }

    attribute_map = {
        'topics': 'topics',
        'complexity': 'complexity',
        'quality': 'quality',
        'push_token': 'pushToken',
        'push_enabled': 'pushEnabled'
    }

    def __init__(self, topics=None, complexity=None, quality=None, push_token=None, push_enabled=None):  # noqa: E501
        """ArticleQueryProfilePostDto - a model defined in Swagger"""  # noqa: E501

        self._topics = None
        self._complexity = None
        self._quality = None
        self._push_token = None
        self._push_enabled = None
        self.discriminator = None

        if topics is not None:
            self.topics = topics
        if complexity is not None:
            self.complexity = complexity
        if quality is not None:
            self.quality = quality
        if push_token is not None:
            self.push_token = push_token
        if push_enabled is not None:
            self.push_enabled = push_enabled

    @property
    def topics(self):
        """Gets the topics of this ArticleQueryProfilePostDto.  # noqa: E501


        :return: The topics of this ArticleQueryProfilePostDto.  # noqa: E501
        :rtype: list[str]
        """
        return self._topics

    @topics.setter
    def topics(self, topics):
        """Sets the topics of this ArticleQueryProfilePostDto.


        :param topics: The topics of this ArticleQueryProfilePostDto.  # noqa: E501
        :type: list[str]
        """

        self._topics = topics

    @property
    def complexity(self):
        """Gets the complexity of this ArticleQueryProfilePostDto.  # noqa: E501


        :return: The complexity of this ArticleQueryProfilePostDto.  # noqa: E501
        :rtype: int
        """
        return self._complexity

    @complexity.setter
    def complexity(self, complexity):
        """Sets the complexity of this ArticleQueryProfilePostDto.


        :param complexity: The complexity of this ArticleQueryProfilePostDto.  # noqa: E501
        :type: int
        """

        self._complexity = complexity

    @property
    def quality(self):
        """Gets the quality of this ArticleQueryProfilePostDto.  # noqa: E501


        :return: The quality of this ArticleQueryProfilePostDto.  # noqa: E501
        :rtype: int
        """
        return self._quality

    @quality.setter
    def quality(self, quality):
        """Sets the quality of this ArticleQueryProfilePostDto.


        :param quality: The quality of this ArticleQueryProfilePostDto.  # noqa: E501
        :type: int
        """

        self._quality = quality

    @property
    def push_token(self):
        """Gets the push_token of this ArticleQueryProfilePostDto.  # noqa: E501


        :return: The push_token of this ArticleQueryProfilePostDto.  # noqa: E501
        :rtype: int
        """
        return self._push_token

    @push_token.setter
    def push_token(self, push_token):
        """Sets the push_token of this ArticleQueryProfilePostDto.


        :param push_token: The push_token of this ArticleQueryProfilePostDto.  # noqa: E501
        :type: int
        """

        self._push_token = push_token

    @property
    def push_enabled(self):
        """Gets the push_enabled of this ArticleQueryProfilePostDto.  # noqa: E501


        :return: The push_enabled of this ArticleQueryProfilePostDto.  # noqa: E501
        :rtype: bool
        """
        return self._push_enabled

    @push_enabled.setter
    def push_enabled(self, push_enabled):
        """Sets the push_enabled of this ArticleQueryProfilePostDto.


        :param push_enabled: The push_enabled of this ArticleQueryProfilePostDto.  # noqa: E501
        :type: bool
        """

        self._push_enabled = push_enabled

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ArticleQueryProfilePostDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
